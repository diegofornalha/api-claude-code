#!/usr/bin/env python3
"""
Verificador de ambiente Claude SDK - Vers√£o simplificada para produ√ß√£o.
Detecta problemas comuns e verifica se tudo est√° funcionando.
"""

import sys
import subprocess
import importlib.util
from pathlib import Path

def check_python_version():
    """Verifica vers√£o m√≠nima do Python."""
    version = sys.version_info
    if version < (3, 10):
        print(f"‚ùå Python {version.major}.{version.minor} detectado")
        print("‚ö†Ô∏è  Requerido: Python 3.10+")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True

def check_claude_cli():
    """Verifica se Claude CLI est√° instalado."""
    try:
        result = subprocess.run(["claude", "--version"], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print(f"‚úÖ Claude CLI: Dispon√≠vel")
            return True
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå Claude CLI n√£o encontrado")
        print("üí° Instale Claude Code CLI primeiro")
        return False

def check_sdk_import():
    """Verifica se SDK importa corretamente."""
    try:
        # Adiciona src ao path
        project_root = Path(__file__).parent.parent
        sys.path.insert(0, str(project_root))
        
        from src import ClaudeSDKClient, query, __version__
        print(f"‚úÖ Claude SDK v{__version__} importado")
        return True
    except ImportError as e:
        print(f"‚ùå Erro no import: {e}")
        print("üí° Execute: pip install -e .")
        return False

def check_cli_wrapper():
    """Verifica se CLI wrapper est√° funcionando."""
    cli_path = Path(__file__).parent.parent / "wrappers_cli" / "claude"
    
    if not cli_path.exists():
        print("‚ùå CLI wrapper n√£o encontrado")
        return False
        
    if not cli_path.is_file() or not cli_path.stat().st_mode & 0o111:
        print("‚ùå CLI wrapper n√£o √© execut√°vel")
        return False
    
    print("‚úÖ CLI wrapper dispon√≠vel")
    return True

def main():
    """Execute diagn√≥stico completo."""
    print("üîç DIAGN√ìSTICO CLAUDE SDK")
    print("=" * 40)
    
    checks = [
        ("Python Version", check_python_version),
        ("Claude CLI", check_claude_cli), 
        ("SDK Import", check_sdk_import),
        ("CLI Wrapper", check_cli_wrapper)
    ]
    
    results = []
    for name, check_func in checks:
        print(f"\nüîç {name}:")
        results.append(check_func())
    
    print(f"\n" + "=" * 40)
    if all(results):
        print("üéâ AMBIENTE OK - Claude SDK pronto!")
        print("üöÄ Execute: cd wrappers_cli && ./claude")
    else:
        print("‚ö†Ô∏è  CORRE√á√ïES NECESS√ÅRIAS")
        print("üìã Veja erros acima para resolver")

if __name__ == "__main__":
    main()